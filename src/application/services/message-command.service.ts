import { Injectable } from '@nestjs/common';
import { CommandName } from 'src/domain/enums/command-name.enum';
import { MessageResponseType } from 'src/domain/enums/message-response-type.enum';
import { MessageType } from 'src/domain/enums/message-type.enum';
import { RequestMessage } from 'src/domain/types/request-message.type';
import { ResponseMessage } from 'src/domain/types/response-message.type';
import { ChatService } from './chat.service';
import { FirebaseService } from './firebase.service';
import { MediaService } from './media.service';

@Injectable()
export class MessageCommandService {
  constructor(
    private firebaseService: FirebaseService,
    private chatService: ChatService,
    private mediaService: MediaService,
  ) {}

  async handle(payload: RequestMessage): Promise<any> {
    const text = payload?.message?.text || '';

    if (payload?.fromMe) return undefined;

    if (this.testPattern(CommandName.PING, text)) {
      return this.ping(payload);
    }

    if (this.testPattern(CommandName.HELP, text)) {
      return this.help(payload);
    }

    if (this.testPattern(CommandName.STICKER, text)) {
      return this.sticker(payload);
    }

    if (this.testPattern(CommandName.INSULT, text)) {
      return this.insult(payload);
    }

    if (this.testPattern(CommandName.CHAT, text)) {
      return this.chat(payload);
    }

    return undefined;
  }

  private testPattern(pattern: string, text: string): boolean {
    const validator = new RegExp(`${pattern}\\b`, 'gi');
    return validator.test(text);
  }

  private ping(payload: RequestMessage): ResponseMessage {
    const { conversationId } = payload;
    return { conversationId, type: MessageResponseType.text, text: 'pong üèì' };
  }

  private help(payload: RequestMessage): ResponseMessage {
    const { conversationId } = payload;
    const commands = [
      '*!ping*: _Envia una respuesta del servidor._',
      '*!help*: _Muestra el menu de commandos._',
      '*!sticker*: _Convierte cualquier imagen, gif, video en sticker._',
      '*!chat*: _Puedes conversar con chatgpt, (necesitas pedir acceso)(respuesta lenta)(beta)._',
      '*!insult*: _Envia un instulto a la persona que mencionas._',
    ].join(`\n`);
    const text = `‚åò‚åò‚åò‚åò‚åò *MENU* ‚åò‚åò‚åò‚åò‚åò\n\n${commands}\n\n‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò‚åò`;
    return { conversationId, type: MessageResponseType.text, text };
  }

  private async sticker(payload: RequestMessage): Promise<ResponseMessage> {
    const { conversationId, message } = payload;
    if (!payload.message.media) return undefined;
    if (payload.message.type === MessageType.image) {
      const media = await this.mediaService.image(message.media);
      return { conversationId, type: MessageResponseType.sticker, media };
    }
    if (payload.message.type === MessageType.video) {
      const media = await this.mediaService.video(message.media);
      return { conversationId, type: MessageResponseType.sticker, media };
    }
    return undefined;
  }
  private insult(payload: RequestMessage): ResponseMessage {
    const { conversationId, message } = payload;
    const { mentions } = message;
    const people = mentions?.map((item) => '@' + item?.split('@')[0]);
    const insults = [
      'Eres m√°s tonto que un pl√°tano en una tienda de zapatos',
      'Eres m√°s leso que un chivo en un supermercado',
      'Eres m√°s bruto que un pote de pegamento',
      'Eres m√°s menso que un burro con lentes',
      'Eres m√°s baboso que un sapo en un charco',
      'Eres m√°s lento que una tortuga en una carrera de gatos',
      'Eres m√°s corto que una semana laboral en domingo',
      'Eres m√°s pendejo que una puerta sin manija',
      'Eres m√°s bobo que un oso hormiguero en un juego de ajedrez',
      'Eres m√°s tonto que una lavadora sin electricidad',
      'Eres m√°s guev√≥n que un caracol en un rally',
      'Eres m√°s bruto que un saco de cemento',
      'Eres m√°s menso que una silla sin patas',
      'Eres m√°s tonto que una papa en un sal√≥n de belleza',
      'Eres m√°s baboso que una gallina en un espejo',
      'Eres m√°s lerdo que un caracol en una carrera de guepardos',
      '      Eres m√°s lento que un caracol con resaca.',
      'Tienes menos luces que un s√≥tano en penumbras.',
      'Tu inteligencia es comparable a la de un cubo de hielo.',
      'Eres m√°s aburrido que ver secar la pintura.',
      'Tienes menos gracia que un patinador sobre hielo.',
      'Eres como una pel√≠cula de terror sin sustos ni emoci√≥n.',
      'Tu creatividad es similar a la de una piedra.',
      'Tienes el encanto de un calcet√≠n mojado.',
      'Eres m√°s despistado que un ping√ºino en el desierto.',
      'Tu sentido del humor es comparable al de un extintor.',
      'Eres m√°s lento que una tortuga con muletas.',
      'Tu coeficiente intelectual es tan bajo que tropieza con tus propios pensamientos.',
      'Tienes menos gracia que una cebra con patines.',
      'Eres como una ensalada sin aderezo, ¬°totalmente ins√≠pido!',
      'Tu capacidad para entender chistes es comparable a la de una piedra.',
      'Eres m√°s predecible que el pron√≥stico del tiempo en el desierto.',
      'Tu cerebro parece una red de pesca... llena de agujeros.',
      'Tienes la habilidad de hacer que el tiempo pase m√°s lento con tu aburrimiento.',
      'Eres como una pel√≠cula sin subt√≠tulos, ¬°nadie entiende lo que dices!',
      'Tienes menos chispa que un f√≥sforo mojado.',
      'Tienes menos gracia que una tostada sin mantequilla.',
      'Eres m√°s despistado que una cabra en una tienda de porcelanas.',
      'Tu sentido del humor es tan seco que podr√≠as hacer un desierto parecer un oc√©ano.',
      'Eres como una pel√≠cula de terror sin monstruos, ¬°totalmente aburrido!',
      'Tienes la habilidad de convertir un chiste en una tragedia griega.',
      'Eres m√°s dif√≠cil de entender que un manual de instrucciones mal traducido.',
      'Tienes menos encanto que una patata sin sal.',
      'Eres tan divertido como una puerta cerrada.',
      'Tu ingenio es tan agudo como una pelota de algod√≥n.',
      'Eres como un chiste malo, nadie quiere escucharte',
    ];
    const index = Math.floor(Math.random() * insults.length);
    const text = `${insults[index]} ${people.join(' ')}`;
    return { conversationId, type: MessageResponseType.text, text, mentions };
  }

  private async chat(payload: RequestMessage): Promise<ResponseMessage> {
    const { conversationId, message } = payload;
    const text = message?.text || '';
    const whitelist: string[] = await this.firebaseService.getWhiteList();
    const [conversationNumber] = payload?.conversationId?.split('@');
    const [userNumber] = payload?.userId?.split('@');
    const prompt = text?.replace(CommandName.CHAT, '').trim();
    const isConversationNumber = whitelist?.includes(conversationNumber);
    const isUserNumber = whitelist?.includes(userNumber);
    if (isConversationNumber || isUserNumber) {
      const response = await this.chatService.send(prompt);
      return { conversationId, type: MessageResponseType.text, text: response };
    }
    return undefined;
  }
}
